name: Build AppImage (Development)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NO_STRIP: true

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        cache: false
        rust-src-dir: src-tauri
        toolchain: stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libxdo-dev \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          xdg-utils

    # - name: Cache dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ~/.cargo/bin/
    #       ~/.cargo/registry/index/
    #       ~/.cargo/registry/cache/
    #       ~/.cargo/git/db/
    #       src-tauri/target/
    #       ~/.bun/install/cache/
    #       node_modules/
    #     key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/bun.lockb') }}
    #     restore-keys: |
    #       ${{ runner.os }}-deps-

    - name: Install frontend dependencies
      run: bun install

    # - name: Run linting
    #   run: |
    #     bun run lint
    #     echo "Frontend linting passed"

    - name: Run TypeScript check
      run: |
        bun run build
        echo "TypeScript compilation successful"

    # - name: Install Tauri CLI
    #   run: cd src-tauri && cargo install

    - name: Run Rust tests
      run: |
        cd src-tauri
        cargo test
        echo "Rust tests passed"

    - name: Prepare branch-based version
      run: |
        # Extract branch name and sanitize for version format
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BRANCH_NAME="${{ github.head_ref }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
        fi

        # Sanitize branch name: replace special chars with dashes, limit length
        SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-20)

        echo "Original branch: $BRANCH_NAME"
        echo "Sanitized for version: $SANITIZED_BRANCH"
        echo "BRANCH_VERSION=$SANITIZED_BRANCH" >> $GITHUB_ENV

        # Backup original tauri.conf.json
        cp src-tauri/tauri.conf.json src-tauri/tauri.conf.json.backup

        # Replace version with branch name in tauri.conf.json
        sed -i "s/\"version\": \"\([^\"]*\)\"/\"version\": \"\\1-$SANITIZED_BRANCH\"/" src-tauri/tauri.conf.json

        echo "Modified tauri.conf.json version:"
        grep "\"version\":" src-tauri/tauri.conf.json

    - name: Build AppImage
      run: |
        echo "Building development AppImage for branch: ${{ env.BRANCH_VERSION }}..."
        bun run tauri build --bundles appimage

        echo "AppImage build successful!"
        ls -la src-tauri/target/release/bundle/appimage/

    - name: Restore original configuration
      if: always()
      run: |
        # Restore original tauri.conf.json
        if [ -f src-tauri/tauri.conf.json.backup ]; then
          mv src-tauri/tauri.conf.json.backup src-tauri/tauri.conf.json
          echo "Restored original tauri.conf.json"
        fi

    - name: Create release
      uses: https://gitea.com/actions/gitea-release-action@v1
      # if: github.event_name != 'pull_request'
      with:
        prerelease: true
        # name: fulcitt-pos-latest-${{ github.sha }}
        files: src-tauri/target/release/bundle/appimage/fulcitt-pos_*.AppImage
        # retention-days: 7
