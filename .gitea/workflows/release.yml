name: Build AppImage (Release)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: true
        type: string

env:
  NO_STRIP: true

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        cache: false
        rust-src-dir: src-tauri
        toolchain: stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libxdo-dev \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          xdg-utils

    - name: Install frontend dependencies
      run: bun install

    - name: Run TypeScript check
      run: |
        bun run build
        echo "TypeScript compilation successful"

    - name: Run Rust tests
      run: |
        cd src-tauri
        cargo test
        echo "Rust tests passed"

    - name: Prepare release version
      run: |
        # Get tag name from trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag }}"
        else
          TAG_NAME="${{ github.ref_name }}"
        fi
        
        # Remove 'v' prefix if present for version number
        VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
        
        echo "Tag: $TAG_NAME"
        echo "Version: $VERSION"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Backup original tauri.conf.json
        cp src-tauri/tauri.conf.json src-tauri/tauri.conf.json.backup

        # Replace version in tauri.conf.json
        sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json

        echo "Modified tauri.conf.json version:"
        grep "\"version\":" src-tauri/tauri.conf.json

    - name: Build AppImage
      run: |
        echo "Building release AppImage for tag: ${{ env.TAG_NAME }}..."
        bun run tauri build --bundles appimage

        echo "AppImage build successful!"
        ls -la src-tauri/target/release/bundle/appimage/

    - name: Restore original configuration
      if: always()
      run: |
        # Restore original tauri.conf.json
        if [ -f src-tauri/tauri.conf.json.backup ]; then
          mv src-tauri/tauri.conf.json.backup src-tauri/tauri.conf.json
          echo "Restored original tauri.conf.json"
        fi

    - name: Create release
      uses: https://gitea.com/actions/gitea-release-action@v1
      with:
        prerelease: false
        name: "Fulcitt POS ${{ env.TAG_NAME }}"
        tag: "${{ env.TAG_NAME }}"
        files: src-tauri/target/release/bundle/appimage/fulcitt-pos_*.AppImage